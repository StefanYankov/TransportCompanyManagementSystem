package services.services.contracts;

import services.data.dto.employees.DriverCreateDTO;
import services.data.dto.employees.DriverUpdateDTO;
import services.data.dto.employees.DriverViewDTO;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * Service interface for managing driver-related operations with DTO-based inputs and outputs.
 */
public interface IDriverService {

    /**
     * Creates a new driver synchronously.
     *
     * @param dto the DTO containing data for the new driver
     * @return the created driver as a DriverViewDTO
     */
    public DriverViewDTO create(DriverCreateDTO dto);

    /**
     * Creates a new driver asynchronously.
     *
     * @param dto the DTO containing data for the new driver
     * @return a CompletableFuture resolving to the created driver as a DriverViewDTO
     */
    public CompletableFuture<DriverViewDTO> createAsync(DriverCreateDTO dto);

    /**
     * Updates an existing driver synchronously.
     *
     * @param dto the DTO containing updated data for the driver
     * @return the updated driver as a DriverViewDTO
     */
    public DriverViewDTO update(DriverUpdateDTO dto);

    /**
     * Updates an existing driver asynchronously.
     *
     * @param dto the DTO containing updated data for the driver
     * @return a CompletableFuture resolving to the updated driver as a DriverViewDTO
     */
    public CompletableFuture<DriverViewDTO> updateAsync(DriverUpdateDTO dto);

    /**
     * Deletes a driver by its ID synchronously.
     *
     * @param id the ID of the driver to delete
     */
    public void delete(Long id);

    /**
     * Deletes a driver by its ID asynchronously.
     *
     * @param id the ID of the driver to delete
     * @return a CompletableFuture indicating when the deletion is complete
     */
    public CompletableFuture<Void> deleteAsync(Long id);

    /**
     * Retrieves a driver by its ID synchronously.
     *
     * @param id the ID of the driver to retrieve
     * @return the driver as a DriverViewDTO, or null if not found
     */
    public DriverViewDTO getById(Long id);

    /**
     * Retrieves a list of all drivers synchronously with pagination and sorting.
     *
     * @param page      the page number (0-based)
     * @param size      the number of entities per page
     * @param orderBy   the field to sort by (e.g., "familyName")
     * @param ascending true for ascending order, false for descending
     * @return a list of drivers as DriverViewDTOs
     */
    public List<DriverViewDTO> getAll(int page, int size, String orderBy, boolean ascending);

    /**
     * Retrieves drivers filtered by a specific qualification synchronously.
     *
     * @param qualificationName the name of the qualification to filter by
     * @return a list of drivers as DriverViewDTOs with the specified qualification
     */
    List<DriverViewDTO> getDriversByQualification(String qualificationName);

    /**
     * Retrieves drivers sorted by salary synchronously.
     *
     * @param ascending true for ascending order, false for descending
     * @return a list of drivers as DriverViewDTOs sorted by salary
     */
    public List<DriverViewDTO> getDriversSortedBySalary(boolean ascending);

    /**
     * Retrieves a count of transports performed by each driver synchronously.
     *
     * @return a map of driver IDs to their transport counts
     */
    public Map<Long, Integer> getDriverTransportCounts();

    /**
     * Retrieves the total revenue generated by a specific driver synchronously.
     *
     * @param driverId the ID of the driver
     * @return the total revenue as a BigDecimal
     */
    public BigDecimal getRevenueByDriver(Long driverId);
}