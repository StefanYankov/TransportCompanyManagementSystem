package services.data.mapping.mappers;

import data.models.vehicles.Van;
import org.modelmapper.ModelMapper;
import services.data.dto.vehicles.VanCreateDTO;
import services.data.dto.vehicles.VanUpdateDTO;
import services.data.dto.vehicles.VanViewDTO;

/**
 * Mapper class for converting between {@link Van} entities and their DTOs using ModelMapper.
 */
public class VanMapper {
    private final ModelMapper modelMapper;

    /**
     * Constructs a new VanMapper with its own ModelMapper instance.
     */
    public VanMapper() {
        this.modelMapper = new ModelMapper();
        configureMappings();
    }

    /**
     * Configures mappings where default behavior needs adjustment,
     * such as skipping the {@code id} field for creation since itâ€™s auto-generated by the database.
     */
    private void configureMappings() {
        // Skip id for VanCreateDTO -> Van (auto-generated by H2)
        modelMapper.createTypeMap(VanCreateDTO.class, Van.class)
                .addMappings(mapper -> mapper.skip(Van::setId));
        // Other fields (registrationPlate, maxCapacityKgOrPassengers, etc.) map automatically
    }

    /**
     * Converts a {@link VanCreateDTO} to a {@link Van} entity.
     * Fields like registrationPlate, maxCapacityKgOrPassengers, currentCapacity, isCargoMode,
     * and transportCompanyId are mapped automatically; id is skipped.
     *
     * @param dto the DTO to convert
     * @return the mapped Van entity
     */
    public Van toEntity(VanCreateDTO dto) {
        return modelMapper.map(dto, Van.class);
    }

    /**
     * Converts a {@link VanUpdateDTO} to a {@link Van} entity.
     * All fields (id, registrationPlate, maxCapacityKgOrPassengers, currentCapacity, isCargoMode,
     * transportCompanyId) are mapped automatically.
     *
     * @param dto the DTO to convert
     * @return the mapped Van entity
     */
    public Van toEntity(VanUpdateDTO dto) {
        return modelMapper.map(dto, Van.class);
    }

    /**
     * Converts a {@link Van} entity to a {@link VanUpdateDTO}.
     * All fields are mapped automatically.
     *
     * @param entity the entity to convert
     * @return the mapped VanUpdateDTO
     */
    public VanUpdateDTO toUpdateDTO(Van entity) {
        return modelMapper.map(entity, VanUpdateDTO.class);
    }

    /**
     * Converts a {@link Van} entity to a {@link VanViewDTO} for display purposes.
     * Fields like id, registrationPlate, maxCapacityKgOrPassengers, and isCargoMode
     * are mapped automatically; relations (e.g., transportCompany) are excluded unless explicitly added.
     *
     * @param entity the entity to convert
     * @return the mapped VanViewDTO
     */
    public VanViewDTO toViewDTO(Van entity) {
        return modelMapper.map(entity, VanViewDTO.class);
    }
}