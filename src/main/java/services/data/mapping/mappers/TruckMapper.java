package services.data.mapping.mappers;

import data.models.vehicles.Truck;
import org.modelmapper.ModelMapper;
import services.data.dto.vehicles.TruckCreateDTO;
import services.data.dto.vehicles.TruckUpdateDTO;
import services.data.dto.vehicles.TruckViewDTO;

/**
 * Mapper class for converting between {@link Truck} entities and their DTOs using ModelMapper.
 */
public class TruckMapper {
    private final ModelMapper modelMapper;

    /**
     * Constructs a new TruckMapper with its own ModelMapper instance.
     */
    public TruckMapper() {
        this.modelMapper = new ModelMapper();
        configureMappings();
    }

    /**
     * Configures mappings where default behavior needs adjustment,
     * such as skipping the {@code id} field for creation since itâ€™s auto-generated by the database.
     */
    private void configureMappings() {
        // Skip id for TruckCreateDTO -> Truck (auto-generated by H2)
        modelMapper.createTypeMap(TruckCreateDTO.class, Truck.class)
                .addMappings(mapper -> mapper.skip(Truck::setId));
        // Other fields (registrationPlate, maxCargoCapacityKg, etc.) map automatically
    }

    /**
     * Converts a {@link TruckCreateDTO} to a {@link Truck} entity.
     * Fields like registrationPlate, maxCargoCapacityKg, currentCargoCapacityKg, cargoType,
     * truckType, and transportCompanyId are mapped automatically; id is skipped.
     *
     * @param dto the DTO to convert
     * @return the mapped Truck entity
     */
    public Truck toEntity(TruckCreateDTO dto) {
        return modelMapper.map(dto, Truck.class);
    }

    /**
     * Converts a {@link TruckUpdateDTO} to a {@link Truck} entity.
     * All fields (id, registrationPlate, maxCargoCapacityKg, currentCargoCapacityKg, cargoType,
     * truckType, transportCompanyId) are mapped automatically.
     *
     * @param dto the DTO to convert
     * @return the mapped Truck entity
     */
    public Truck toEntity(TruckUpdateDTO dto) {
        return modelMapper.map(dto, Truck.class);
    }

    /**
     * Converts a {@link Truck} entity to a {@link TruckUpdateDTO}.
     * All fields are mapped automatically.
     *
     * @param entity the entity to convert
     * @return the mapped TruckUpdateDTO
     */
    public TruckUpdateDTO toUpdateDTO(Truck entity) {
        return modelMapper.map(entity, TruckUpdateDTO.class);
    }

    /**
     * Converts a {@link Truck} entity to a {@link TruckViewDTO} for display purposes.
     * Fields like id, registrationPlate, maxCargoCapacityKg, cargoType, and truckType
     * are mapped automatically; relations (e.g., transportCompany) are excluded unless explicitly added.
     *
     * @param entity the entity to convert
     * @return the mapped TruckViewDTO
     */
    public TruckViewDTO toViewDTO(Truck entity) {
        return modelMapper.map(entity, TruckViewDTO.class);
    }
}