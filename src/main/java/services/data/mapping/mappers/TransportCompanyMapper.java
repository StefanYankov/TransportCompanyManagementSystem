package services.data.mapping.mappers;

import data.models.TransportCompany;
import org.modelmapper.ModelMapper;
import services.data.dto.companies.TransportCompanyCreateDTO;
import services.data.dto.companies.TransportCompanyUpdateDTO;
import services.data.dto.companies.TransportCompanyViewDTO;

/**
 * Mapper class for converting between {@link TransportCompany} entities and their DTOs.
 */
public class TransportCompanyMapper {
    private final ModelMapper modelMapper;

    /**
     * Constructs a new TransportCompanyMapper with its own ModelMapper instance.
     */
    public TransportCompanyMapper() {
        this.modelMapper = new ModelMapper();
        configureMappings();
    }

    /**
     * Configures mappings where default behavior needs adjustment.
     */
    private void configureMappings() {
        // Skip id for creation - auto-generated by H2
        modelMapper.createTypeMap(TransportCompanyCreateDTO.class, TransportCompany.class)
                .addMappings(mapper -> mapper.skip(TransportCompany::setId));
    }

    /**
     * Converts a {@link TransportCompanyCreateDTO} to a {@link TransportCompany} entity.
     * Name and address are mapped automatically; id is skipped.
     *
     * @param dto the DTO to convert
     * @return the mapped TransportCompany entity
     */
    public TransportCompany toEntity(TransportCompanyCreateDTO dto) {
        return modelMapper.map(dto, TransportCompany.class);
    }

    /**
     * Converts a {@link TransportCompanyUpdateDTO} to a {@link TransportCompany} entity.
     * ID, name, and address are mapped automatically.
     *
     * @param dto the DTO to convert
     * @return the mapped TransportCompany entity
     */
    public TransportCompany toEntity(TransportCompanyUpdateDTO dto) {
        return modelMapper.map(dto, TransportCompany.class);
    }

    /**
     * Converts a {@link TransportCompany} entity to a {@link TransportCompanyUpdateDTO}.
     * ID, name, and address are mapped automatically.
     *
     * @param entity the entity to convert
     * @return the mapped TransportCompanyUpdateDTO
     */
    public TransportCompanyUpdateDTO toUpdateDTO(TransportCompany entity) {
        return modelMapper.map(entity, TransportCompanyUpdateDTO.class);
    }

    /**
     * Converts a {@link TransportCompany} entity to a {@link TransportCompanyViewDTO}.
     * ID, name, and address are mapped automatically; other fields (e.g., createdOn) are ignored.
     *
     * @param entity the entity to convert
     * @return the mapped TransportCompanyViewDTO
     */
    public TransportCompanyViewDTO toViewDTO(TransportCompany entity) {
        return modelMapper.map(entity, TransportCompanyViewDTO.class);
    }
}