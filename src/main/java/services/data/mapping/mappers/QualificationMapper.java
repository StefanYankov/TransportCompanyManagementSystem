package services.data.mapping.mappers;

import data.models.employee.Qualification;
import org.modelmapper.ModelMapper;
import services.data.dto.employees.QualificationCreateDTO;
import services.data.dto.employees.QualificationUpdateDTO;
import services.data.dto.employees.QualificationViewDTO;

/**
 * Mapper class for converting between {@link Qualification} entities and their DTOs using ModelMapper.
 */
public class QualificationMapper {
    private final ModelMapper modelMapper;

    /**
     * Constructs a new QualificationMapper with its own ModelMapper instance.
     */
    public QualificationMapper() {
        this.modelMapper = new ModelMapper();
        configureMappings();
    }

    /**
     * Configures mappings where default behavior needs adjustment,
     * such as skipping the {@code id} field for creation since itâ€™s auto-generated by the database.
     */
    private void configureMappings() {
        modelMapper.createTypeMap(QualificationCreateDTO.class, Qualification.class)
                .addMappings(mapper -> mapper.skip(Qualification::setId));
    }

    /**
     * Converts a {@link QualificationCreateDTO} to a {@link Qualification} entity.
     * Fields like name and description are mapped automatically; id is skipped.
     *
     * @param dto the DTO to convert
     * @return the mapped Qualification entity
     */
    public Qualification toEntity(QualificationCreateDTO dto) {
        if (dto == null) throw new IllegalArgumentException("QualificationCreateDTO must not be null");
        return modelMapper.map(dto, Qualification.class);
    }

    /**
     * Updates an existing {@link Qualification} entity with fields from a {@link QualificationUpdateDTO}.
     *
     * @param dto the DTO containing updated fields
     * @param existing the existing Qualification entity to update
     */
    public void toEntity(QualificationUpdateDTO dto, Qualification existing) {
        if (dto == null) throw new IllegalArgumentException("QualificationUpdateDTO must not be null");
        if (dto.getName() != null) existing.setName(dto.getName());
        if (dto.getDescription() != null) existing.setDescription(dto.getDescription());
    }

    /**
     * Converts a {@link Qualification} entity to a {@link QualificationUpdateDTO}.
     *
     * @param entity the entity to convert
     * @return the mapped QualificationUpdateDTO
     */
    public QualificationUpdateDTO toUpdateDTO(Qualification entity) {
        return modelMapper.map(entity, QualificationUpdateDTO.class);
    }

    /**
     * Converts a {@link Qualification} entity to a {@link QualificationViewDTO} for display purposes.
     *
     * @param entity the entity to convert
     * @return the mapped QualificationViewDTO
     */
    public QualificationViewDTO toViewDTO(Qualification entity) {
        if (entity == null) return null;
        return modelMapper.map(entity, QualificationViewDTO.class);
    }
}