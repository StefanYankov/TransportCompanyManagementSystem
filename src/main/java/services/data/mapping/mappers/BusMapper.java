package services.data.mapping.mappers;


import data.models.vehicles.Bus;
import org.modelmapper.ModelMapper;
import services.data.dto.vehicles.BusCreateDTO;
import services.data.dto.vehicles.BusUpdateDTO;
import services.data.dto.vehicles.BusViewDTO;

/**
 * Mapper class for converting between {@link Bus} entities and their DTOs using ModelMapper.
 */
public class BusMapper {
    private final ModelMapper modelMapper;

    /**
     * Constructs a new BusMapper with its own ModelMapper instance.
     */
    public BusMapper() {
        this.modelMapper = new ModelMapper();
        configureMappings();
    }

    /**
     * Configures mappings where default behavior needs adjustment,
     * such as skipping the {@code id} field for creation since itâ€™s auto-generated by the database.
     */
    private void configureMappings() {
        // Skip id for BusCreateDTO -> Bus (auto-generated by H2)
        modelMapper.createTypeMap(BusCreateDTO.class, Bus.class)
                .addMappings(mapper -> mapper.skip(Bus::setId));
        // Other fields (registrationPlate, maxPassengerCapacity, etc.) map automatically
    }

    /**
     * Converts a {@link BusCreateDTO} to a {@link Bus} entity.
     * Fields like registrationPlate, maxPassengerCapacity, currentPassengerCount, and transportCompanyId
     * are mapped automatically; id is skipped.
     *
     * @param dto the DTO to convert
     * @return the mapped Bus entity
     */
    public Bus toEntity(BusCreateDTO dto) {
        return modelMapper.map(dto, Bus.class);
    }

    /**
     * Converts a {@link BusUpdateDTO} to a {@link Bus} entity.
     * All fields (id, registrationPlate, maxPassengerCapacity, currentPassengerCount, transportCompanyId)
     * are mapped automatically.
     *
     * @param dto the DTO to convert
     * @return the mapped Bus entity
     */
    public Bus toEntity(BusUpdateDTO dto) {
        return modelMapper.map(dto, Bus.class);
    }

    /**
     * Converts a {@link Bus} entity to a {@link BusUpdateDTO}.
     * All fields are mapped automatically.
     *
     * @param entity the entity to convert
     * @return the mapped BusUpdateDTO
     */
    public BusUpdateDTO toUpdateDTO(Bus entity) {
        return modelMapper.map(entity, BusUpdateDTO.class);
    }

    /**
     * Converts a {@link Bus} entity to a {@link BusViewDTO} for display purposes.
     * Fields like id, registrationPlate, and maxPassengerCapacity are mapped automatically;
     * relations (e.g., transportCompany) are excluded unless explicitly added.
     *
     * @param entity the entity to convert
     * @return the mapped BusViewDTO
     */
    public BusViewDTO toViewDTO(Bus entity) {
        return modelMapper.map(entity, BusViewDTO.class);
    }
}