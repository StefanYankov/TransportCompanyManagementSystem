package services.data.mapping.mappers;

import data.models.transportservices.TransportPassengersService;
import org.modelmapper.ModelMapper;
import services.data.dto.transportservices.TransportPassengersServiceCreateDTO;
import services.data.dto.transportservices.TransportPassengersServiceUpdateDTO;
import services.data.dto.transportservices.TransportPassengersServiceViewDTO;

/**
 * Mapper class for converting between {@link TransportPassengersService} entities and their DTOs using ModelMapper.
 */
public class TransportPassengersServiceMapper {
    private final ModelMapper modelMapper;

    /**
     * Constructs a new TransportPassengersServiceMapper with its own ModelMapper instance.
     */
    public TransportPassengersServiceMapper() {
        this.modelMapper = new ModelMapper();
        configureMappings();
    }

    /**
     * Configures mappings where default behavior needs adjustment,
     * such as skipping the {@code id} field for creation since itâ€™s auto-generated by the database.
     */
    private void configureMappings() {
        // Skip id for TransportPassengersServiceCreateDTO -> TransportPassengersService
        modelMapper.createTypeMap(TransportPassengersServiceCreateDTO.class, TransportPassengersService.class)
                .addMappings(mapper -> mapper.skip(TransportPassengersService::setId));
        // Other fields (passengers, price, transportCompanyId, etc.) map automatically
    }

    /**
     * Converts a {@link TransportPassengersServiceCreateDTO} to a {@link TransportPassengersService} entity.
     * Fields like passengers, price, transportCompanyId, destinationId, clientId, vehicleId, driverId,
     * startingDate, and endingDate are mapped automatically; id is skipped.
     *
     * @param dto the DTO to convert
     * @return the mapped TransportPassengersService entity
     */
    public TransportPassengersService toEntity(TransportPassengersServiceCreateDTO dto) {
        return modelMapper.map(dto, TransportPassengersService.class);
    }

    /**
     * Converts a {@link TransportPassengersServiceUpdateDTO} to a {@link TransportPassengersService} entity.
     * All fields (id, passengers, price, transportCompanyId, destinationId, clientId, vehicleId, driverId,
     * startingDate, endingDate) are mapped automatically.
     *
     * @param dto the DTO to convert
     * @return the mapped TransportPassengersService entity
     */
    public TransportPassengersService toEntity(TransportPassengersServiceUpdateDTO dto) {
        return modelMapper.map(dto, TransportPassengersService.class);
    }

    /**
     * Converts a {@link TransportPassengersService} entity to a {@link TransportPassengersServiceUpdateDTO}.
     * All fields are mapped automatically.
     *
     * @param entity the entity to convert
     * @return the mapped TransportPassengersServiceUpdateDTO
     */
    public TransportPassengersServiceUpdateDTO toUpdateDTO(TransportPassengersService entity) {
        return modelMapper.map(entity, TransportPassengersServiceUpdateDTO.class);
    }

    /**
     * Converts a {@link TransportPassengersService} entity to a {@link TransportPassengersServiceViewDTO} for display.
     * Fields like id, passengers, price, startingDate, and endingDate are mapped automatically; relations
     * (e.g., transportCompany, client) are excluded unless explicitly added.
     *
     * @param entity the entity to convert
     * @return the mapped TransportPassengersServiceViewDTO
     */
    public TransportPassengersServiceViewDTO toViewDTO(TransportPassengersService entity) {
        return modelMapper.map(entity, TransportPassengersServiceViewDTO.class);
    }
}