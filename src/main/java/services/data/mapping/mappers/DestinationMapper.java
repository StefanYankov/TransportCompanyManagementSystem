package services.data.mapping.mappers;

import data.models.transportservices.Destination;
import org.modelmapper.ModelMapper;
import services.data.dto.transportservices.DestinationCreateDTO;
import services.data.dto.transportservices.DestinationUpdateDTO;
import services.data.dto.transportservices.DestinationViewDTO;

/**
 * Mapper class for converting between {@link Destination} entities and their DTOs using ModelMapper.
 */
public class DestinationMapper {
    private final ModelMapper modelMapper;

    /**
     * Constructs a new DestinationMapper with its own ModelMapper instance.
     */
    public DestinationMapper() {
        this.modelMapper = new ModelMapper();
        configureMappings();
    }

    /**
     * Configures mappings where default behavior needs adjustment,
     * such as skipping the {@code id} field for creation since it’s auto-generated by the database.
     */
    private void configureMappings() {
        // Skip id for DestinationCreateDTO -> Destination (auto-generated by H2)
        modelMapper.createTypeMap(DestinationCreateDTO.class, Destination.class)
                .addMappings(mapper -> mapper.skip(Destination::setId));
        // Other fields (startingLocation, endingLocation) map automatically due to matching names
    }

    /**
     * Converts a {@link DestinationCreateDTO} to a {@link Destination} entity.
     * Fields like startingLocation and endingLocation are mapped automatically by ModelMapper
     * based on matching names; id is skipped as it’s generated by the database.
     *
     * @param dto the DTO to convert
     * @return the mapped Destination entity
     */
    public Destination toEntity(DestinationCreateDTO dto) {
        return modelMapper.map(dto, Destination.class);
    }

    /**
     * Converts a {@link DestinationUpdateDTO} to a {@link Destination} entity.
     * All fields (id, startingLocation, endingLocation) are mapped automatically by ModelMapper
     * based on matching names.
     *
     * @param dto the DTO to convert
     * @return the mapped Destination entity
     */
    public Destination toEntity(DestinationUpdateDTO dto) {
        return modelMapper.map(dto, Destination.class);
    }

    /**
     * Converts a {@link Destination} entity to a {@link DestinationUpdateDTO}.
     * All fields (id, startingLocation, endingLocation) are mapped automatically by ModelMapper
     * based on matching names.
     *
     * @param entity the entity to convert
     * @return the mapped DestinationUpdateDTO
     */
    public DestinationUpdateDTO toUpdateDTO(Destination entity) {
        return modelMapper.map(entity, DestinationUpdateDTO.class);
    }

    /**
     * Converts a {@link Destination} entity to a {@link DestinationViewDTO} for display purposes.
     * Fields like id, startingLocation, and endingLocation are mapped automatically by ModelMapper
     * based on matching names; any additional entity fields are ignored unless explicitly mapped.
     *
     * @param entity the entity to convert
     * @return the mapped DestinationViewDTO
     */
    public DestinationViewDTO toViewDTO(Destination entity) {
        return modelMapper.map(entity, DestinationViewDTO.class);
    }
}