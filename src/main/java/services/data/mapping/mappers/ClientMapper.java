package services.data.mapping.mappers;

import data.models.Client;
import org.modelmapper.ModelMapper;
import services.data.dto.clients.ClientCreateDTO;
import services.data.dto.clients.ClientUpdateDTO;
import services.data.dto.clients.ClientViewDTO;

/**
 * Mapper class for converting between {@link Client} entities and their DTOs using ModelMapper.
 */
public class ClientMapper {
    private final ModelMapper modelMapper;

    /**
     * Constructs a new ClientMapper with its own ModelMapper instance.
     */
    public ClientMapper() {
        this.modelMapper = new ModelMapper();
        configureMappings();
    }

    /**
     * Configures mappings where default behavior needs adjustment.
     */
    private void configureMappings() {
        // Skip id for ClientCreateDTO -> Client (auto-generated by H2)
        modelMapper.createTypeMap(ClientCreateDTO.class, Client.class)
                .addMappings(mapper -> mapper.skip(Client::setId));
    }

    /**
     * Converts a {@link ClientCreateDTO} to a {@link Client} entity.
     * Name and address are mapped automatically; id is skipped.
     *
     * @param dto the DTO to convert
     * @return the mapped Client entity
     */
    public Client toEntity(ClientCreateDTO dto) {
        return modelMapper.map(dto, Client.class);
    }

    /**
     * Converts a {@link ClientUpdateDTO} to a {@link Client} entity.
     * ID, name, and address are mapped automatically.
     *
     * @param dto the DTO to convert
     * @return the mapped Client entity
     */
    public Client toEntity(ClientUpdateDTO dto) {
        return modelMapper.map(dto, Client.class);
    }

    /**
     * Converts a {@link Client} entity to a {@link ClientUpdateDTO}.
     * IÐ”, name, and address are mapped automatically.
     *
     * @param entity the entity to convert
     * @return the mapped ClientUpdateDTO
     */
    public ClientUpdateDTO toUpdateDTO(Client entity) {
        return modelMapper.map(entity, ClientUpdateDTO.class);
    }

    /**
     * Converts a {@link Client} entity to a {@link ClientViewDTO}.
     * ID, name, and address are mapped automatically; other fields (e.g., createdOn) are ignored.
     *
     * @param entity the entity to convert
     * @return the mapped ClientViewDTO
     */
    public ClientViewDTO toViewDTO(Client entity) {
        return modelMapper.map(entity, ClientViewDTO.class);
    }
}