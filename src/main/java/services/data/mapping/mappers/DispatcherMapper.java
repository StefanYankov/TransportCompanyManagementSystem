package services.data.mapping.mappers;

import data.models.employee.Dispatcher;
import org.modelmapper.ModelMapper;
import services.data.dto.employees.DispatcherCreateDTO;
import services.data.dto.employees.DispatcherUpdateDTO;
import services.data.dto.employees.DispatcherViewDTO;

/**
 * Mapper class for converting between {@link Dispatcher} entities and their DTOs using ModelMapper.
 */
public class DispatcherMapper {
    private final ModelMapper modelMapper;

    /**
     * Constructs a new DispatcherMapper with its own ModelMapper instance.
     */
    public DispatcherMapper() {
        this.modelMapper = new ModelMapper();
        configureMappings();
    }

    /**
     * Configures mappings where default behavior needs adjustment,
     * such as skipping the {@code id} field for creation since itâ€™s auto-generated by the database.
     */
    private void configureMappings() {
        // Skip id for DispatcherCreateDTO -> Dispatcher (auto-generated by H2)
        modelMapper.createTypeMap(DispatcherCreateDTO.class, Dispatcher.class)
                .addMappings(mapper -> mapper.skip(Dispatcher::setId));
        // Other fields (firstName, familyName, contactNumber, transportCompanyId) map automatically
    }

    /**
     * Converts a {@link DispatcherCreateDTO} to a {@link Dispatcher} entity.
     * Fields like firstName, familyName, contactNumber, and transportCompanyId
     * are mapped automatically; id is skipped.
     *
     * @param dto the DTO to convert
     * @return the mapped Dispatcher entity
     */
    public Dispatcher toEntity(DispatcherCreateDTO dto) {
        return modelMapper.map(dto, Dispatcher.class);
    }

    /**
     * Converts a {@link DispatcherUpdateDTO} to a {@link Dispatcher} entity.
     * All fields (id, firstName, familyName, contactNumber, transportCompanyId)
     * are mapped automatically.
     *
     * @param dto the DTO to convert
     * @return the mapped Dispatcher entity
     */
    public Dispatcher toEntity(DispatcherUpdateDTO dto) {
        return modelMapper.map(dto, Dispatcher.class);
    }

    /**
     * Converts a {@link Dispatcher} entity to a {@link DispatcherUpdateDTO}.
     * All fields are mapped automatically.
     *
     * @param entity the entity to convert
     * @return the mapped DispatcherUpdateDTO
     */
    public DispatcherUpdateDTO toUpdateDTO(Dispatcher entity) {
        return modelMapper.map(entity, DispatcherUpdateDTO.class);
    }

    /**
     * Converts a {@link Dispatcher} entity to a {@link DispatcherViewDTO} for display purposes.
     * Fields like id, firstName, familyName, and contactNumber are mapped automatically;
     * relations (e.g., transportCompany) are excluded unless explicitly added.
     *
     * @param entity the entity to convert
     * @return the mapped DispatcherViewDTO
     */
    public DispatcherViewDTO toViewDTO(Dispatcher entity) {
        return modelMapper.map(entity, DispatcherViewDTO.class);
    }
}