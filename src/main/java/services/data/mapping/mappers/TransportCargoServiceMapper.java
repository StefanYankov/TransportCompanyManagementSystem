package services.data.mapping.mappers;

import data.models.transportservices.TransportCargoService;
import org.modelmapper.ModelMapper;
import services.data.dto.transportservices.TransportCargoServiceCreateDTO;
import services.data.dto.transportservices.TransportCargoServiceUpdateDTO;
import services.data.dto.transportservices.TransportCargoServiceViewDTO;

/**
 * Mapper class for converting between {@link TransportCargoService} entities and their DTOs using ModelMapper.
 */
public class TransportCargoServiceMapper {
    private final ModelMapper modelMapper;

    /**
     * Constructs a new TransportCargoServiceMapper with its own ModelMapper instance.
     */
    public TransportCargoServiceMapper() {
        this.modelMapper = new ModelMapper();
        configureMappings();
    }

    /**
     * Configures mappings where default behavior needs adjustment,
     * such as skipping the {@code id} field for creation since itâ€™s auto-generated by the database.
     */
    private void configureMappings() {
        // Skip id for TransportCargoServiceCreateDTO -> TransportCargoService
        modelMapper.createTypeMap(TransportCargoServiceCreateDTO.class, TransportCargoService.class)
                .addMappings(mapper -> mapper.skip(TransportCargoService::setId));
    }

    /**
     * Converts a {@link TransportCargoServiceCreateDTO} to a {@link TransportCargoService} entity.
     * Fields like cargo, price, transportCompanyId, destinationId, clientId, vehicleId, driverId,
     * startingDate, and endingDate are mapped automatically; id is skipped.
     *
     * @param dto the DTO to convert
     * @return the mapped TransportCargoService entity
     */
    public TransportCargoService toEntity(TransportCargoServiceCreateDTO dto) {
        return modelMapper.map(dto, TransportCargoService.class);
    }

    /**
     * Converts a {@link TransportCargoServiceUpdateDTO} to a {@link TransportCargoService} entity.
     * All fields (id, cargo, price, transportCompanyId, destinationId, clientId, vehicleId, driverId,
     * startingDate, endingDate) are mapped automatically.
     *
     * @param dto the DTO to convert
     * @return the mapped TransportCargoService entity
     */
    public TransportCargoService toEntity(TransportCargoServiceUpdateDTO dto) {
        return modelMapper.map(dto, TransportCargoService.class);
    }

    /**
     * Converts a {@link TransportCargoService} entity to a {@link TransportCargoServiceUpdateDTO}.
     * All fields are mapped automatically.
     *
     * @param entity the entity to convert
     * @return the mapped TransportCargoServiceUpdateDTO
     */
    public TransportCargoServiceUpdateDTO toUpdateDTO(TransportCargoService entity) {
        return modelMapper.map(entity, TransportCargoServiceUpdateDTO.class);
    }

    /**
     * Converts a {@link TransportCargoService} entity to a {@link TransportCargoServiceViewDTO} for display.
     * Fields like id, cargo, price, startingDate, and endingDate are mapped automatically; relations
     * (e.g., transportCompany, client) are excluded unless explicitly added.
     *
     * @param entity the entity to convert
     * @return the mapped TransportCargoServiceViewDTO
     */
    public TransportCargoServiceViewDTO toViewDTO(TransportCargoService entity) {
        return modelMapper.map(entity, TransportCargoServiceViewDTO.class);
    }
}